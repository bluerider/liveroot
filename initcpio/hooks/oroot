#!/bin/ash

run_hook() {
  if [ "${oroot}" ]; then
     root=$(resolve_device "${root}")

     fsck_root() {
       echo &>/dev/null
     }
     if [ "$cryptkey" ]; then
        keydev=$(resolve_device "${cryptkey%%:*}")
     fi;
     if [[ "${cryptdevice}" && "${oroot}" = "live" && "${cryptkey}" && ! -f "/hooks/lvm2" ]]; then
        echo "#!/bin/bash
              mkdir /run/orootkey;
              mount \"$keydev\" /run/orootkey;
              cryptsetup --key-file \"/run/orootkey${cryptkey##*:}\" open \"$resolved\" \"$cryptname\";
              umount /run/orootkey;
              mkdir /run/oroot;
              mount -o \$(awk '{if (\$2 == \"/\") {print \$4}}' /etc/fstab) \"$root\" /run/oroot || mount \"$root\" /run/oroot;
              rsync -ax --no-whole-file --inplace --delete / /run/oroot --exclude boot --exclude dev --exclude mnt --exclude proc --exclude run --exclude sys --exclude tmp --exclude usr/bin/overlay_flush;
              umount /run/oroot && rm -r /run/oroot;
              cryptsetup close \"$root\";
              " > /overlay_flush;
       elif [[ "${cryptdevice}" && "${oroot}" = "live" && ! -f "/hooks/lvm2" ]]; then
        echo "#!/bin/bash
              cryptsetup open \"$resolved\" \"$cryptname\";
              mkdir /run/oroot;
              mount -o \$(awk '{if (\$2 == \"/\") {print \$4}}' /etc/fstab) \"$root\" /run/oroot || mount \"$root\" /run/oroot;
              rsync -ax --no-whole-file --inplace --delete / /run/oroot --exclude boot --exclude dev --exclude mnt --exclude proc --exclude run --exclude sys --exclude tmp --exclude usr/bin/overlay_flush;
              umount /run/oroot && rm -r /run/oroot;
              cryptsetup close \"$root\";
              " > /overlay_flush;
       else
        echo "#!/bin/bash
              mkdir /run/oroot;
              mount -o \$(awk '{if (\$2 == \"/\") {print \$4}}' /etc/fstab) \"$root\" /run/oroot || mount \"$root\" /run/oroot;
              rsync -ax --no-whole-file --inplace --delete / /run/oroot --exclude boot --exclude dev --exclude mnt --exclude proc --exclude run --exclude sys --exclude tmp --exclude usr/bin/overlay_flush;
              umount /run/oroot && rm -r /run/oroot;
              " > /overlay_flush;
     fi;
     chmod ug+x /overlay_flush
     poll_device "$root" 20;
     "$mount_handler" /lroot;
     if [ ! -b "/dev/zram0" ]; then
        modprobe zram num_devices=$(($(nproc)+2))
     fi;
     mem_size=$(free -m | awk '/Mem/ {print int($2)}');
     if [[ "${oroot}" = "compressed" || "${oroot}" = "live" ]]; then
        oroot_device=$(zramctl -f -s $(($mem_size*2))M -a lzo -t $(nproc))
        if [ "$quiet" ]; then
           mkfs.ext2 "$oroot_device" &>/dev/null
          else
           mkfs.ext2 "$oroot_device";
        fi;
        mount "$oroot_device" /troot;
      else
        mount troot -t tmpfs -o size=${mem_size}M /troot
     fi;
     unset mem_size;
     if [ "${oroot}" = "live" ]; then
        cp -a /lroot/* /troot/;
        umount /lroot;
        umount /troot;
        export oroot_device;
        export cryptdevice;
        oroot_mount() {
          mount "$oroot_device" "$1"
          mv /overlay_flush /new_root/usr/bin/
          }
        if [ "${cryptdevice}" ]; then
           cryptsetup close "$root";
        fi;
       else
        mkdir /troot/upper;
        mkdir /troot/work;
        oroot_mount() {
          mount oroot -t overlay -o lowerdir=/lroot,upperdir=/troot/upper,workdir=/troot/work "$1"
          mv /overlay_flush /new_root/usr/bin/
        }
     fi;
     mount_handler=oroot_mount
  fi;
}
